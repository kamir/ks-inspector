
----------------
QUERY (1):       [CALL gds.graph.drop('graph1'); ]
----------------
{graphName=graph1, database=neo4j, memoryUsage=575 KiB, sizeInBytes=589744, nodeProjection=null, relationshipProjection=null, nodeQuery=match (n) WHERE n:Service OR n:Topic return id(n) as id, relationshipQuery=match (a:Service)-[c]->(b:Topic) return id(c) as id, id(a) as source, id(b) as target, nodeCount=466, relationshipCount=678, density=0.0031288938114356914, creationTime=2021-08-30T14:49:19.551002+02:00[Europe/Berlin], modificationTime=2021-08-30T14:49:19.554751+02:00[Europe/Berlin], schema={relationships={__ALL__={id=Float}}, nodes={__ALL__={}}}}
> Result (MCQ:1) : 1 rows.

----------------
QUERY (2):       [CALL gds.graph.create.cypher( 'graph1', 'match (n) WHERE n:Service OR n:Topic return id(n) as id ', 'match (a:Service)-[c]->(b:Topic) return id(c) as id, id(a) as source, id(b) as target', {validateRelationships: False} ) YIELD graphName, nodeCount, relationshipCount, createMillis; ]
----------------
{graphName=graph1, nodeCount=466, relationshipCount=678, createMillis=5}
> Result (MCQ:2) : 1 rows.

----------------
QUERY (3):       [CALL gds.graph.list(); ]
----------------
{degreeDistribution={p99=24, min=0, max=44, mean=1.4549356223175967, p90=1, p50=0, p999=44, p95=14, p75=0}, graphName=graph1, database=neo4j, memoryUsage=572 KiB, sizeInBytes=586376, nodeProjection=null, relationshipProjection=null, nodeQuery=match (n) WHERE n:Service OR n:Topic return id(n) as id, relationshipQuery=match (a:Service)-[c]->(b:Topic) return id(c) as id, id(a) as source, id(b) as target, nodeCount=466, relationshipCount=678, density=0.0031288938114356914, creationTime=2021-08-30T14:51:51.965635+02:00[Europe/Berlin], modificationTime=2021-08-30T14:51:51.969115+02:00[Europe/Berlin], schema={relationships={__ALL__={id=Float}}, nodes={__ALL__={}}}}
> Result (MCQ:3) : 1 rows.

----------------
QUERY (4):       [CALL gds.localClusteringCoefficient.write.estimate('graph1', { writeProperty: 'localClusteringCoefficient' }) YIELD nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory ]
----------------
{nodeCount=466, relationshipCount=678, bytesMin=7648, bytesMax=7648, requiredMemory=7648 Bytes}
> Result (MCQ:4) : 1 rows.

----------------
QUERY (5):       [CALL apoc.export.graphml.all( "/Users/mkaempf/GITHUB.public/ks-inspector/last-export.graphml", {readLabels: true, storeNodeIds: true}) ]
----------------
{file=/Users/mkaempf/GITHUB.public/ks-inspector/last-export.graphml, source=database: nodes(483), rels(678), format=graphml, nodes=483, relationships=678, properties=483, time=7, rows=1161, batchSize=-1, batches=0, done=true, data=null}
> Result (MCQ:5) : 1 rows.


Summary:

EXECUTION (1)-->[true] 
EXECUTION (2)-->[true] 
EXECUTION (3)-->[true] 
EXECUTION (4)-->[true] 
EXECUTION (5)-->[true] 

