--
-- the OpenTSx example KSQL
--

CREATE STREAM OpenTSx_Event_Flow_State_stream (persistEvents VARCHAR,
  persistEpisodes VARCHAR,
  l BIGINT,
  t2 BIGINT,
  t1 BIGINT,
  t0 BIGINT,
  generator VARCHAR,
  z BIGINT,
  sendDuration DOUBLE,
  generateDuration DOUBLE) WITH (KAFKA_TOPIC='OpenTSx_Event_Flow_State', VALUE_FORMAT='JSON');

CREATE STREAM OpenTSx_Episodes_stream WITH (KAFKA_TOPIC='OpenTSx_Episodes', VALUE_FORMAT='AVRO');

CREATE STREAM OpenTSx_Events_stream WITH (KAFKA_TOPIC='OpenTSx_Events', VALUE_FORMAT='AVRO');

CREATE STREAM OPENTSX_EPISODES_MD_STREAM AS SELECT LABEL, TSTART, TEND, ZOBSERVATIONS, INCREMENT, URI FROM OPENTSX_EPISODES_STREAM EMIT CHANGES;

--
-- Here we do use some custom UDFs
--
CREATE STREAM DFA_1 AS SELECT LABEL, TSTART, TEND, udf_TSx_identifyPeaks(OBSERVATIONS,TSTART,TEND,INCREMENT) FROM OPENTSX_EPISODES_STREAM EMIT CHANGES;

CREATE STREAM PEAKS_1 AS SELECT LABEL, TSTART, TEND, udf_TSx_identifyPeaks(OBSERVATIONS,TSTART,TEND,INCREMENT) FROM OPENTSX_EPISODES_STREAM EMIT CHANGES;

CREATE STREAM DECAY_1 AS SELECT LABEL, TSTART, TEND, udf_TSx_identifyDecay(OBSERVATIONS,TSTART,TEND,INCREMENT) FROM OPENTSX_EPISODES_STREAM EMIT CHANGES;

CREATE STREAM GROWTH_1 AS SELECT LABEL, TSTART, TEND, udf_TSx_identifyGrowth(OBSERVATIONS,TSTART,TEND,INCREMENT) FROM OPENTSX_EPISODES_STREAM EMIT CHANGES;

--
-- All individual streams will be joined into a final result stream.
--
CREATE STREAM ALL_RESULTS_MERGED AS SELECT * FROM OPENTSX_EPISODES_MD_STREAM md
  LEFT JOIN DFA_1 df ON md.LABEL = df.LABEL
  LEFT JOIN PEAKS_1 p ON md.LABEL = p.LABEL
  LEFT JOIN DECAY_1 d ON md.LABEL = d.LABEL
  LEFT JOIN GROWTH_1 g ON md.LABEL = g.LABEL
 EMIT CHANGES;
